// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: airy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_airy_proto protoreflect.FileDescriptor

var file_airy_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x69, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x43,
	0x0a, 0x08, 0x41, 0x69, 0x72, 0x79, 0x47, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x3a, 0x0a, 0x09, 0x41, 0x69, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x12, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x06, 0x5a, 0x04, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_airy_proto_goTypes = []interface{}{
	(*Combinations)(nil),  // 0: pb.Combinations
	(*Packet)(nil),        // 1: pb.Packet
	(*emptypb.Empty)(nil), // 2: google.protobuf.Empty
}
var file_airy_proto_depIdxs = []int32{
	0, // 0: pb.AiryGate.PushToUsers:input_type -> pb.Combinations
	1, // 1: pb.AiryLogic.Request:input_type -> pb.Packet
	2, // 2: pb.AiryGate.PushToUsers:output_type -> google.protobuf.Empty
	2, // 3: pb.AiryLogic.Request:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_airy_proto_init() }
func file_airy_proto_init() {
	if File_airy_proto != nil {
		return
	}
	file_combination_proto_init()
	file_packet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_airy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_airy_proto_goTypes,
		DependencyIndexes: file_airy_proto_depIdxs,
	}.Build()
	File_airy_proto = out.File
	file_airy_proto_rawDesc = nil
	file_airy_proto_goTypes = nil
	file_airy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AiryGateClient is the client API for AiryGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AiryGateClient interface {
	PushToUsers(ctx context.Context, in *Combinations, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type airyGateClient struct {
	cc grpc.ClientConnInterface
}

func NewAiryGateClient(cc grpc.ClientConnInterface) AiryGateClient {
	return &airyGateClient{cc}
}

func (c *airyGateClient) PushToUsers(ctx context.Context, in *Combinations, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.AiryGate/PushToUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiryGateServer is the server API for AiryGate service.
type AiryGateServer interface {
	PushToUsers(context.Context, *Combinations) (*emptypb.Empty, error)
}

// UnimplementedAiryGateServer can be embedded to have forward compatible implementations.
type UnimplementedAiryGateServer struct {
}

func (*UnimplementedAiryGateServer) PushToUsers(context.Context, *Combinations) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToUsers not implemented")
}

func RegisterAiryGateServer(s *grpc.Server, srv AiryGateServer) {
	s.RegisterService(&_AiryGate_serviceDesc, srv)
}

func _AiryGate_PushToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Combinations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiryGateServer).PushToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AiryGate/PushToUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiryGateServer).PushToUsers(ctx, req.(*Combinations))
	}
	return interceptor(ctx, in, info, handler)
}

var _AiryGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AiryGate",
	HandlerType: (*AiryGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushToUsers",
			Handler:    _AiryGate_PushToUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airy.proto",
}

// AiryLogicClient is the client API for AiryLogic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AiryLogicClient interface {
	Request(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type airyLogicClient struct {
	cc grpc.ClientConnInterface
}

func NewAiryLogicClient(cc grpc.ClientConnInterface) AiryLogicClient {
	return &airyLogicClient{cc}
}

func (c *airyLogicClient) Request(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.AiryLogic/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiryLogicServer is the server API for AiryLogic service.
type AiryLogicServer interface {
	Request(context.Context, *Packet) (*emptypb.Empty, error)
}

// UnimplementedAiryLogicServer can be embedded to have forward compatible implementations.
type UnimplementedAiryLogicServer struct {
}

func (*UnimplementedAiryLogicServer) Request(context.Context, *Packet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}

func RegisterAiryLogicServer(s *grpc.Server, srv AiryLogicServer) {
	s.RegisterService(&_AiryLogic_serviceDesc, srv)
}

func _AiryLogic_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiryLogicServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AiryLogic/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiryLogicServer).Request(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _AiryLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AiryLogic",
	HandlerType: (*AiryLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _AiryLogic_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airy.proto",
}
